#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/video/background_segm.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/highgui.hpp"
#include <iostream>
using namespace cv;
using namespace std;

//Define variables and constants
#define radius 3
#define thickness 2
// After how many loops does it take a picture of your hand, assumes hand is there after this many loops
#define loopCountSeconds 55
//points where the data will be taken
vector<Point> points;
// to add all the colors from the above points
std::vector<Scalar> colors;
void initializePoints()
{
    // to quickly move whole figure
    int xOffset = 200;
    int yOffset = 0;
    // points vaguely in the shape of a hand
    points.push_back(Point(300 + xOffset ,300 + yOffset));
    points.push_back(Point(380 + xOffset ,300 + yOffset));
    points.push_back(Point(340 + xOffset ,250 + yOffset));
    points.push_back(Point(370 + xOffset ,220 + yOffset));
    points.push_back(Point(310 + xOffset ,220 + yOffset));
    points.push_back(Point(360 + xOffset ,190 + yOffset));
    points.push_back(Point(320 + xOffset ,190 + yOffset));
    
}

void drawPoints(Mat frame)
{
    // Print instructions on screen
    string imgText = string("Cover rectangles with palm");
    int fontFace = FONT_HERSHEY_PLAIN;
    putText(frame,imgText,Point(frame.cols/2, frame.rows/10),fontFace, 1.2f,Scalar(200,0,0),2);

    Scalar red(255,0,0);
    for(auto iter=points.begin();iter!=points.end();++iter)
    {
        circle(frame, *iter, radius, red, thickness);        
    }
    
}

void getColor(Mat frame)
{
    // Set the regions of interest with the points
    int i=0;
    for(auto iter=points.begin();iter!=points.end();++iter)
    {
        // Create a rectangle with with each of the points, enclosing the circle
        Rect r(iter->x - radius, iter->y - radius, radius * 2,radius * 2);
        // Create regions of interest from the frame, and then calculate its mean
        colors.push_back(mean(frame(r)));
    }
    
}
int main(int argc, char const *argv[])
{
    initializePoints();
    // open the default camera
    VideoCapture cap(0); 
    // check if we succeeded
    if(!cap.isOpened())  
        return -1;

    BackgroundSubtractorMOG2 mog2;

    Mat edges;
    Mat frame;

    //foreground mask generated by MOG method
    Mat fgMaskMOG; 

    bool scanned = false;
    for(int loopcount=0;;loopcount++)
    {
        // get a new frame from camera
        cap >> frame; 
        // flip the image horizonatally to get mirror effect
        flip(frame,frame,1);
        // cvtColor(frame, frame, CV_BGR2HLS);
        if (!scanned)
            drawPoints(frame);
        if (!scanned && loopcount > loopCountSeconds){
            getColor(frame);
            scanned=!scanned;
        }
        // mog2(frame, fgMaskMOG);
        // imshow("fram", fgMaskMOG);
        imshow("frame", frame);
        if(waitKey(30) >= 0) break; //exit on some key
    }

    
    return 0;
}

